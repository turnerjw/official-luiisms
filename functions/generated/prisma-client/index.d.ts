// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  luiism: (where?: LuiismWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  luiism: (where: LuiismWhereUniqueInput) => LuiismPromise;
  luiisms: (
    args?: {
      where?: LuiismWhereInput;
      orderBy?: LuiismOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Luiism>;
  luiismsConnection: (
    args?: {
      where?: LuiismWhereInput;
      orderBy?: LuiismOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LuiismConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLuiism: (data: LuiismCreateInput) => LuiismPromise;
  updateLuiism: (
    args: { data: LuiismUpdateInput; where: LuiismWhereUniqueInput }
  ) => LuiismPromise;
  updateManyLuiisms: (
    args: { data: LuiismUpdateManyMutationInput; where?: LuiismWhereInput }
  ) => BatchPayloadPromise;
  upsertLuiism: (
    args: {
      where: LuiismWhereUniqueInput;
      create: LuiismCreateInput;
      update: LuiismUpdateInput;
    }
  ) => LuiismPromise;
  deleteLuiism: (where: LuiismWhereUniqueInput) => LuiismPromise;
  deleteManyLuiisms: (where?: LuiismWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  luiism: (
    where?: LuiismSubscriptionWhereInput
  ) => LuiismSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LuiismOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ism_ASC"
  | "ism_DESC"
  | "usage_ASC"
  | "usage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface LuiismUpdateManyWithoutFavouritedByInput {
  create?:
    | LuiismCreateWithoutFavouritedByInput[]
    | LuiismCreateWithoutFavouritedByInput;
  delete?: LuiismWhereUniqueInput[] | LuiismWhereUniqueInput;
  connect?: LuiismWhereUniqueInput[] | LuiismWhereUniqueInput;
  set?: LuiismWhereUniqueInput[] | LuiismWhereUniqueInput;
  disconnect?: LuiismWhereUniqueInput[] | LuiismWhereUniqueInput;
  update?:
    | LuiismUpdateWithWhereUniqueWithoutFavouritedByInput[]
    | LuiismUpdateWithWhereUniqueWithoutFavouritedByInput;
  upsert?:
    | LuiismUpsertWithWhereUniqueWithoutFavouritedByInput[]
    | LuiismUpsertWithWhereUniqueWithoutFavouritedByInput;
  deleteMany?: LuiismScalarWhereInput[] | LuiismScalarWhereInput;
  updateMany?:
    | LuiismUpdateManyWithWhereNestedInput[]
    | LuiismUpdateManyWithWhereNestedInput;
}

export type LuiismWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface LuiismUpdateWithoutFavouritedByDataInput {
  ism?: String;
  usage?: String;
  submittedBy?: UserUpdateOneWithoutSubmissionsInput;
}

export interface LuiismWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  ism?: String;
  ism_not?: String;
  ism_in?: String[] | String;
  ism_not_in?: String[] | String;
  ism_lt?: String;
  ism_lte?: String;
  ism_gt?: String;
  ism_gte?: String;
  ism_contains?: String;
  ism_not_contains?: String;
  ism_starts_with?: String;
  ism_not_starts_with?: String;
  ism_ends_with?: String;
  ism_not_ends_with?: String;
  usage?: String;
  usage_not?: String;
  usage_in?: String[] | String;
  usage_not_in?: String[] | String;
  usage_lt?: String;
  usage_lte?: String;
  usage_gt?: String;
  usage_gte?: String;
  usage_contains?: String;
  usage_not_contains?: String;
  usage_starts_with?: String;
  usage_not_starts_with?: String;
  usage_ends_with?: String;
  usage_not_ends_with?: String;
  submittedBy?: UserWhereInput;
  favouritedBy_every?: UserWhereInput;
  favouritedBy_some?: UserWhereInput;
  favouritedBy_none?: UserWhereInput;
  AND?: LuiismWhereInput[] | LuiismWhereInput;
  OR?: LuiismWhereInput[] | LuiismWhereInput;
  NOT?: LuiismWhereInput[] | LuiismWhereInput;
}

export interface LuiismCreateManyWithoutSubmittedByInput {
  create?:
    | LuiismCreateWithoutSubmittedByInput[]
    | LuiismCreateWithoutSubmittedByInput;
  connect?: LuiismWhereUniqueInput[] | LuiismWhereUniqueInput;
}

export interface LuiismUpdateWithoutSubmittedByDataInput {
  ism?: String;
  usage?: String;
  favouritedBy?: UserUpdateManyWithoutFavouritesInput;
}

export interface LuiismCreateWithoutSubmittedByInput {
  ism: String;
  usage: String;
  favouritedBy?: UserCreateManyWithoutFavouritesInput;
}

export interface LuiismUpsertWithWhereUniqueWithoutFavouritedByInput {
  where: LuiismWhereUniqueInput;
  update: LuiismUpdateWithoutFavouritedByDataInput;
  create: LuiismCreateWithoutFavouritedByInput;
}

export interface LuiismUpdateInput {
  ism?: String;
  usage?: String;
  submittedBy?: UserUpdateOneWithoutSubmissionsInput;
  favouritedBy?: UserUpdateManyWithoutFavouritesInput;
}

export interface LuiismSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LuiismWhereInput;
  AND?: LuiismSubscriptionWhereInput[] | LuiismSubscriptionWhereInput;
  OR?: LuiismSubscriptionWhereInput[] | LuiismSubscriptionWhereInput;
  NOT?: LuiismSubscriptionWhereInput[] | LuiismSubscriptionWhereInput;
}

export interface UserUpdateOneWithoutSubmissionsInput {
  create?: UserCreateWithoutSubmissionsInput;
  update?: UserUpdateWithoutSubmissionsDataInput;
  upsert?: UserUpsertWithoutSubmissionsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  submissions?: LuiismUpdateManyWithoutSubmittedByInput;
  favourites?: LuiismUpdateManyWithoutFavouritedByInput;
}

export interface UserUpdateWithoutSubmissionsDataInput {
  name?: String;
  email?: String;
  favourites?: LuiismUpdateManyWithoutFavouritedByInput;
}

export interface LuiismUpdateManyMutationInput {
  ism?: String;
  usage?: String;
}

export interface UserUpsertWithWhereUniqueWithoutFavouritesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFavouritesDataInput;
  create: UserCreateWithoutFavouritesInput;
}

export interface UserUpdateManyDataInput {
  name?: String;
  email?: String;
}

export interface LuiismUpdateWithWhereUniqueWithoutFavouritedByInput {
  where: LuiismWhereUniqueInput;
  data: LuiismUpdateWithoutFavouritedByDataInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  submissions_every?: LuiismWhereInput;
  submissions_some?: LuiismWhereInput;
  submissions_none?: LuiismWhereInput;
  favourites_every?: LuiismWhereInput;
  favourites_some?: LuiismWhereInput;
  favourites_none?: LuiismWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface LuiismCreateInput {
  ism: String;
  usage: String;
  submittedBy?: UserCreateOneWithoutSubmissionsInput;
  favouritedBy?: UserCreateManyWithoutFavouritesInput;
}

export interface LuiismUpsertWithWhereUniqueWithoutSubmittedByInput {
  where: LuiismWhereUniqueInput;
  update: LuiismUpdateWithoutSubmittedByDataInput;
  create: LuiismCreateWithoutSubmittedByInput;
}

export interface UserCreateWithoutSubmissionsInput {
  name: String;
  email: String;
  favourites?: LuiismCreateManyWithoutFavouritedByInput;
}

export interface LuiismScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  ism?: String;
  ism_not?: String;
  ism_in?: String[] | String;
  ism_not_in?: String[] | String;
  ism_lt?: String;
  ism_lte?: String;
  ism_gt?: String;
  ism_gte?: String;
  ism_contains?: String;
  ism_not_contains?: String;
  ism_starts_with?: String;
  ism_not_starts_with?: String;
  ism_ends_with?: String;
  ism_not_ends_with?: String;
  usage?: String;
  usage_not?: String;
  usage_in?: String[] | String;
  usage_not_in?: String[] | String;
  usage_lt?: String;
  usage_lte?: String;
  usage_gt?: String;
  usage_gte?: String;
  usage_contains?: String;
  usage_not_contains?: String;
  usage_starts_with?: String;
  usage_not_starts_with?: String;
  usage_ends_with?: String;
  usage_not_ends_with?: String;
  AND?: LuiismScalarWhereInput[] | LuiismScalarWhereInput;
  OR?: LuiismScalarWhereInput[] | LuiismScalarWhereInput;
  NOT?: LuiismScalarWhereInput[] | LuiismScalarWhereInput;
}

export interface LuiismCreateWithoutFavouritedByInput {
  ism: String;
  usage: String;
  submittedBy?: UserCreateOneWithoutSubmissionsInput;
}

export interface LuiismUpdateManyWithWhereNestedInput {
  where: LuiismScalarWhereInput;
  data: LuiismUpdateManyDataInput;
}

export interface UserCreateWithoutFavouritesInput {
  name: String;
  email: String;
  submissions?: LuiismCreateManyWithoutSubmittedByInput;
}

export interface LuiismUpdateManyDataInput {
  ism?: String;
  usage?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
}

export interface UserUpsertWithoutSubmissionsInput {
  update: UserUpdateWithoutSubmissionsDataInput;
  create: UserCreateWithoutSubmissionsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateManyWithoutFavouritesInput {
  create?:
    | UserCreateWithoutFavouritesInput[]
    | UserCreateWithoutFavouritesInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFavouritesInput[]
    | UserUpdateWithWhereUniqueWithoutFavouritesInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFavouritesInput[]
    | UserUpsertWithWhereUniqueWithoutFavouritesInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface LuiismCreateManyWithoutFavouritedByInput {
  create?:
    | LuiismCreateWithoutFavouritedByInput[]
    | LuiismCreateWithoutFavouritedByInput;
  connect?: LuiismWhereUniqueInput[] | LuiismWhereUniqueInput;
}

export interface LuiismUpdateWithWhereUniqueWithoutSubmittedByInput {
  where: LuiismWhereUniqueInput;
  data: LuiismUpdateWithoutSubmittedByDataInput;
}

export interface LuiismUpdateManyWithoutSubmittedByInput {
  create?:
    | LuiismCreateWithoutSubmittedByInput[]
    | LuiismCreateWithoutSubmittedByInput;
  delete?: LuiismWhereUniqueInput[] | LuiismWhereUniqueInput;
  connect?: LuiismWhereUniqueInput[] | LuiismWhereUniqueInput;
  set?: LuiismWhereUniqueInput[] | LuiismWhereUniqueInput;
  disconnect?: LuiismWhereUniqueInput[] | LuiismWhereUniqueInput;
  update?:
    | LuiismUpdateWithWhereUniqueWithoutSubmittedByInput[]
    | LuiismUpdateWithWhereUniqueWithoutSubmittedByInput;
  upsert?:
    | LuiismUpsertWithWhereUniqueWithoutSubmittedByInput[]
    | LuiismUpsertWithWhereUniqueWithoutSubmittedByInput;
  deleteMany?: LuiismScalarWhereInput[] | LuiismScalarWhereInput;
  updateMany?:
    | LuiismUpdateManyWithWhereNestedInput[]
    | LuiismUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithoutFavouritesDataInput {
  name?: String;
  email?: String;
  submissions?: LuiismUpdateManyWithoutSubmittedByInput;
}

export interface UserUpdateWithWhereUniqueWithoutFavouritesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFavouritesDataInput;
}

export interface UserCreateManyWithoutFavouritesInput {
  create?:
    | UserCreateWithoutFavouritesInput[]
    | UserCreateWithoutFavouritesInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateOneWithoutSubmissionsInput {
  create?: UserCreateWithoutSubmissionsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  submissions?: LuiismCreateManyWithoutSubmittedByInput;
  favourites?: LuiismCreateManyWithoutFavouritedByInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface LuiismSubscriptionPayload {
  mutation: MutationType;
  node: Luiism;
  updatedFields: String[];
  previousValues: LuiismPreviousValues;
}

export interface LuiismSubscriptionPayloadPromise
  extends Promise<LuiismSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LuiismPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LuiismPreviousValuesPromise>() => T;
}

export interface LuiismSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LuiismSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LuiismSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LuiismPreviousValuesSubscription>() => T;
}

export interface LuiismEdge {
  node: Luiism;
  cursor: String;
}

export interface LuiismEdgePromise extends Promise<LuiismEdge>, Fragmentable {
  node: <T = LuiismPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LuiismEdgeSubscription
  extends Promise<AsyncIterator<LuiismEdge>>,
    Fragmentable {
  node: <T = LuiismSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  submissions: <T = FragmentableArray<Luiism>>(
    args?: {
      where?: LuiismWhereInput;
      orderBy?: LuiismOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  favourites: <T = FragmentableArray<Luiism>>(
    args?: {
      where?: LuiismWhereInput;
      orderBy?: LuiismOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  submissions: <T = Promise<AsyncIterator<LuiismSubscription>>>(
    args?: {
      where?: LuiismWhereInput;
      orderBy?: LuiismOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  favourites: <T = Promise<AsyncIterator<LuiismSubscription>>>(
    args?: {
      where?: LuiismWhereInput;
      orderBy?: LuiismOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Luiism {
  id: ID_Output;
  ism: String;
  usage: String;
}

export interface LuiismPromise extends Promise<Luiism>, Fragmentable {
  id: () => Promise<ID_Output>;
  ism: () => Promise<String>;
  usage: () => Promise<String>;
  submittedBy: <T = UserPromise>() => T;
  favouritedBy: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LuiismSubscription
  extends Promise<AsyncIterator<Luiism>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ism: () => Promise<AsyncIterator<String>>;
  usage: () => Promise<AsyncIterator<String>>;
  submittedBy: <T = UserSubscription>() => T;
  favouritedBy: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LuiismConnection {
  pageInfo: PageInfo;
  edges: LuiismEdge[];
}

export interface LuiismConnectionPromise
  extends Promise<LuiismConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LuiismEdge>>() => T;
  aggregate: <T = AggregateLuiismPromise>() => T;
}

export interface LuiismConnectionSubscription
  extends Promise<AsyncIterator<LuiismConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LuiismEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLuiismSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LuiismPreviousValues {
  id: ID_Output;
  ism: String;
  usage: String;
}

export interface LuiismPreviousValuesPromise
  extends Promise<LuiismPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ism: () => Promise<String>;
  usage: () => Promise<String>;
}

export interface LuiismPreviousValuesSubscription
  extends Promise<AsyncIterator<LuiismPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ism: () => Promise<AsyncIterator<String>>;
  usage: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateLuiism {
  count: Int;
}

export interface AggregateLuiismPromise
  extends Promise<AggregateLuiism>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLuiismSubscription
  extends Promise<AsyncIterator<AggregateLuiism>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Luiism",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
